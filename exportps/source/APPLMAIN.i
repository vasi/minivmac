/*	APPLMAIN.c	Copyright (C) 2007 Paul C. Pratt	You can redistribute this file and/or modify it under the terms	of version 2 of the GNU General Public License as published by	the Free Software Foundation.  You should have received a copy	of the license along with this file; see the file COPYING.	This file is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	license for more details.*//*	APPLication MAIN*/LOCALVAR MyDir_R BaseDirR;LOCALFUNC tMyErr ExportFromFile2HostFile(short refNum, ui5r L,	ui4r Name){	tMyErr err;	ui4r InsertVol;	if (noErr == (err = ProgressBar_SetStage_v2(		"Making the new file\311", 0)))	if (noErr == (err = HostVolInsertNew_v2(L, Name, &InsertVol)))	{		if (noErr == (err = ProgressBar_SetStage_v2(			"Running, type command-period to abort\311", L)))		{			err = WriteFromFileToVol_v2(refNum, InsertVol, 0, L);		}		err = NewDiskEject_v2(InsertVol, err);	}	return err;}LOCALPROC ProgramMain(void){	tMyErr err;	short refNum;	ui4r Name;	uimr n;	StringPtr src_s = (StringPtr)"\pPostScript";	StringPtr dst_s = (StringPtr)"\pPostScript.ps";	if (noErr != (err = MyOpenOldFileRead_v2(		&BaseDirR, src_s, &refNum)))	{		if (fnfErr == err) {			MyAlertFromCStr(				"I did not find a file named 'PostScript'.");			err = kMyErrReported;		}	} else {		if (noErr == (err = MyOpenFileGetEOF_v2(refNum, &n)))		if (noErr == (err = PStr2Pbuf_v2(dst_s, &Name)))		if (noErr == (err = ExportFromFile2HostFile(refNum,			n, Name)))		{		}		err = CombineErr(err, MyCloseFile_v2(refNum));		if (noErr == err) {			err = MyDeleteFile_v2(&BaseDirR, src_s);		}	}	vCheckSysErr(err);}LOCALPROC ProgramZapVars(void){}LOCALPROC ProgramPreInit(void){	OneWindAppPreInit();}LOCALFUNC blnr ExportExtnInit(void){	ui4r version;	ui5r features;	blnr IsOk = falseblnr;	if (! (noErr == HaveDiskExtenstion_v2())) {		MyAlertFromCStr(			"The Mini vMac extension mechanism is not available.");	} else if (! CheckSysErr(DiskVersion_v2(&version))) {	} else if (version < 2) {		MyAlertFromCStr("The Disk Extension version is too old.");	} else if (! CheckSysErr(DiskFeatures_v2(&features))) {	} else if (0 == (features & ((ui5r)1 << kFeatureCmndDisk_New))) {		MyAlertFromCStr(			"The new file creation feature is not available.");	} else if (0 == (features & ((ui5r)1 << kFeatureCmndDisk_RawMode)))	{		MyAlertFromCStr("Raw mode access feature is not available.");	} else {		IsOk = trueblnr;	}	return IsOk;}LOCALFUNC blnr ProgramInit(void){	if (CheckSysErr(MyMemory_Init_v2()))	if (ExportExtnInit())	if (CheckSysErr(OneWindAppInit_v2()))	if (CheckSysErr(MyHGetDir_v2(&BaseDirR)))	{		return trueblnr;	}	return falseblnr;}LOCALPROC ProgramUnInit(void){	OneWindAppUnInit();	MyMemory_UnInit();}int main(void){	ProgramZapVars();	ProgramPreInit();	if (ProgramInit()) {		ProgramMain();	}	ProgramUnInit();	return 0;}