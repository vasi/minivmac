/*	MD5CHKSM.i	Copyright (C) 2007 Paul C. Pratt, Free Software Foundation	You can redistribute this file and/or modify it under the terms	of version 2 of the GNU General Public License as published by	the Free Software Foundation.  You should have received a copy	of the license along with this file; see the file COPYING.	This file is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	license for more details.*//*	MD5 CHecKSuM	adapted from md5.c in glibc-2.3.4,	with following copyright notices:*//*	Functions to compute MD5 message digest of files or memory blocks.	according to the definition of MD5 in RFC 1321 from April 1992.	Copyright (C) 1995,1996,1997,1999,2000,2001 Free Software Foundation, Inc.	This file is part of the GNU C Library.	The GNU C Library is free software; you can redistribute it and/or	modify it under the terms of the GNU Lesser General Public	License as published by the Free Software Foundation; either	version 2.1 of the License, or (at your option) any later version.	The GNU C Library is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU	Lesser General Public License for more details.	You should have received a copy of the GNU Lesser General Public	License along with the GNU C Library; if not, write to the Free	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA	02111-1307 USA.*//* Written by Ulrich Drepper <drepper@gnu.ai.mit.edu>, 1995.  */#define WORDS_BIGENDIAN 1#ifdef WORDS_BIGENDIAN#define SWAP(n) \	(((n) << 24) | (((n) & 0xff00) << 8) | (((n) >> 8) & 0xff00) | ((n) >> 24))#else#define SWAP(n) (n)#endifLOCALPROC SetLSBui5(ui3p r, ui5r x){	r[0] = (x      ) & 0xFF;	r[1] = (x >>  8) & 0xFF;	r[2] = (x >> 16) & 0xFF;	r[3] = (x >> 24) & 0xFF;}LOCALFUNC ui5r GetLSBui5(ui3p r){	return ((((((ui5r)r[3] << 8) | (ui5r)r[2]) << 8) | (ui5r)r[1]) << 8) | (ui5r)r[0];}/* Structure to save state of computation between the single steps.  */struct md5_ctx{	ui5r A;	ui5r B;	ui5r C;	ui5r D;};typedef struct md5_ctx md5_ctx;/*	It is unfortunate that C does not provide an operator for	cyclic rotation.  Hope the C compiler is smart enough.*/#if 0#define CYCLIC(w, s) (w = ((w << (unsigned long)s) | (w >> (unsigned long)(32 - s))))#else/* MPW C compiler generates incorrect code, instead: */LOCALFUNC unsigned long CYCLIC0(unsigned long w, unsigned long s){	return ((w << s) | (w >> (32 - s)));}#define CYCLIC(w, s) (w = CYCLIC0(w, s))#endif/*	These are the four functions used in the four steps of the MD5 algorithm	and defined in the RFC 1321.  The first function is a little bit optimized	(as found in Colin Plumbs public domain implementation).*//* #define FF(b, c, d) ((b & c) | (~b & d)) */#define FF(b, c, d) (d ^ (b & (c ^ d)))#define FG(b, c, d) FF (d, b, c)#define FH(b, c, d) (b ^ c ^ d)#define FI(b, c, d) (c ^ (b | ~ d))/*	Process n*64 bytes of BUFFER, accumulating context into CTX.*/LOCALPROC md5_process_block(ui3p buffer, uimr n, md5_ctx *ctx){	unsigned long i;	ui5b correct_words[16];	ui3p words = buffer;	ui5b *cwp;	ui4r j;	ui5r A_save;	ui5r B_save;	ui5r C_save;	ui5r D_save;	ui5r A = ctx->A;	ui5r B = ctx->B;	ui5r C = ctx->C;	ui5r D = ctx->D;	/*		Process all bytes in the buffer with 64 bytes in each round of		the loop.	*/	for (i = n; i != 0; --i) {		A_save = A;		B_save = B;		C_save = C;		D_save = D;		/*			Because the algorithms processing			unit is a 32-bit word and it is determined to work on words in			little endian byte order we perhaps have to change the byte order			before the computation.  To reduce the work for the next steps			we store the swapped words in the array CORRECT_WORDS.		*/		cwp = correct_words;		for (j = 16; j != 0; --j) {			*cwp++ = GetLSBui5(words);			words += 4;		}		/*			Before we start, one word to the strange constants.			They are defined in RFC 1321 as			T[i] = (int) (4294967296.0 * fabs (sin (i))), i = 1..64		*/#define md5_OP(f, a, b, c, d, k, s, T) \	do { \		a += f(b, c, d) + correct_words[k] + T; \		CYCLIC(a, s); \		a += b; \	} while (0)		/* Round 1.  */		md5_OP(FF, A, B, C, D,  0,  7, 0xd76aa478);		md5_OP(FF, D, A, B, C,  1, 12, 0xe8c7b756);		md5_OP(FF, C, D, A, B,  2, 17, 0x242070db);		md5_OP(FF, B, C, D, A,  3, 22, 0xc1bdceee);		md5_OP(FF, A, B, C, D,  4,  7, 0xf57c0faf);		md5_OP(FF, D, A, B, C,  5, 12, 0x4787c62a);		md5_OP(FF, C, D, A, B,  6, 17, 0xa8304613);		md5_OP(FF, B, C, D, A,  7, 22, 0xfd469501);		md5_OP(FF, A, B, C, D,  8,  7, 0x698098d8);		md5_OP(FF, D, A, B, C,  9, 12, 0x8b44f7af);		md5_OP(FF, C, D, A, B, 10, 17, 0xffff5bb1);		md5_OP(FF, B, C, D, A, 11, 22, 0x895cd7be);		md5_OP(FF, A, B, C, D, 12,  7, 0x6b901122);		md5_OP(FF, D, A, B, C, 13, 12, 0xfd987193);		md5_OP(FF, C, D, A, B, 14, 17, 0xa679438e);		md5_OP(FF, B, C, D, A, 15, 22, 0x49b40821);		/* Round 2.  */		md5_OP(FG, A, B, C, D,  1,  5, 0xf61e2562);		md5_OP(FG, D, A, B, C,  6,  9, 0xc040b340);		md5_OP(FG, C, D, A, B, 11, 14, 0x265e5a51);		md5_OP(FG, B, C, D, A,  0, 20, 0xe9b6c7aa);		md5_OP(FG, A, B, C, D,  5,  5, 0xd62f105d);		md5_OP(FG, D, A, B, C, 10,  9, 0x02441453);		md5_OP(FG, C, D, A, B, 15, 14, 0xd8a1e681);		md5_OP(FG, B, C, D, A,  4, 20, 0xe7d3fbc8);		md5_OP(FG, A, B, C, D,  9,  5, 0x21e1cde6);		md5_OP(FG, D, A, B, C, 14,  9, 0xc33707d6);		md5_OP(FG, C, D, A, B,  3, 14, 0xf4d50d87);		md5_OP(FG, B, C, D, A,  8, 20, 0x455a14ed);		md5_OP(FG, A, B, C, D, 13,  5, 0xa9e3e905);		md5_OP(FG, D, A, B, C,  2,  9, 0xfcefa3f8);		md5_OP(FG, C, D, A, B,  7, 14, 0x676f02d9);		md5_OP(FG, B, C, D, A, 12, 20, 0x8d2a4c8a);		/* Round 3.  */		md5_OP(FH, A, B, C, D,  5,  4, 0xfffa3942);		md5_OP(FH, D, A, B, C,  8, 11, 0x8771f681);		md5_OP(FH, C, D, A, B, 11, 16, 0x6d9d6122);		md5_OP(FH, B, C, D, A, 14, 23, 0xfde5380c);		md5_OP(FH, A, B, C, D,  1,  4, 0xa4beea44);		md5_OP(FH, D, A, B, C,  4, 11, 0x4bdecfa9);		md5_OP(FH, C, D, A, B,  7, 16, 0xf6bb4b60);		md5_OP(FH, B, C, D, A, 10, 23, 0xbebfbc70);		md5_OP(FH, A, B, C, D, 13,  4, 0x289b7ec6);		md5_OP(FH, D, A, B, C,  0, 11, 0xeaa127fa);		md5_OP(FH, C, D, A, B,  3, 16, 0xd4ef3085);		md5_OP(FH, B, C, D, A,  6, 23, 0x04881d05);		md5_OP(FH, A, B, C, D,  9,  4, 0xd9d4d039);		md5_OP(FH, D, A, B, C, 12, 11, 0xe6db99e5);		md5_OP(FH, C, D, A, B, 15, 16, 0x1fa27cf8);		md5_OP(FH, B, C, D, A,  2, 23, 0xc4ac5665);		/* Round 4.  */		md5_OP(FI, A, B, C, D,  0,  6, 0xf4292244);		md5_OP(FI, D, A, B, C,  7, 10, 0x432aff97);		md5_OP(FI, C, D, A, B, 14, 15, 0xab9423a7);		md5_OP(FI, B, C, D, A,  5, 21, 0xfc93a039);		md5_OP(FI, A, B, C, D, 12,  6, 0x655b59c3);		md5_OP(FI, D, A, B, C,  3, 10, 0x8f0ccc92);		md5_OP(FI, C, D, A, B, 10, 15, 0xffeff47d);		md5_OP(FI, B, C, D, A,  1, 21, 0x85845dd1);		md5_OP(FI, A, B, C, D,  8,  6, 0x6fa87e4f);		md5_OP(FI, D, A, B, C, 15, 10, 0xfe2ce6e0);		md5_OP(FI, C, D, A, B,  6, 15, 0xa3014314);		md5_OP(FI, B, C, D, A, 13, 21, 0x4e0811a1);		md5_OP(FI, A, B, C, D,  4,  6, 0xf7537e82);		md5_OP(FI, D, A, B, C, 11, 10, 0xbd3af235);		md5_OP(FI, C, D, A, B,  2, 15, 0x2ad7d2bb);		md5_OP(FI, B, C, D, A,  9, 21, 0xeb86d391);		/* Add the starting values of the context.  */		A += A_save;		B += B_save;		C += C_save;		D += D_save;	}	/* Put checksum in context given as argument.  */	ctx->A = A;	ctx->B = B;	ctx->C = C;	ctx->D = D;}typedef pascal tMyErr (*md5_read_ProcPtr)(MyPtr p, uimr MaxL, uimr *ActualL);/*	This array contains the bytes used to pad the buffer to the next	64-byte boundary.  (RFC 1321, 3.1: Step 1)*/static const unsigned char fillbuf[64] = {	0x80, 0 /* , 0, 0, ...  */};/* Important: md5_BLOCKSIZE must be a multiple of 64.  */#define md5_SubBlockLn2sz 6#define md5_SubBlockSz PowOf2(md5_SubBlockLn2sz) /* 64 bytes */#define md5_BLOCKn 64#define md5_BLOCKSIZE (md5_BLOCKn * md5_SubBlockSz)/*	Compute MD5 message digest for bytes read from STREAM.  The	resulting message digest number will be written into the 16 bytes	beginning at RESBLOCK.	The result is in little endian byte order.*/LOCALFUNC tMyErr md5_stream(md5_read_ProcPtr md5_read_p, ui3p resblock){	/*		IMPORTANT: On some systems it is required that RESBUF is correctly		aligned for a 32 bits value.	*/	md5_ctx ctx;	ui3b buffer[md5_BLOCKSIZE + 8 + md5_SubBlockSz + md5_SubBlockSz];	ui3p bufferp = buffer;	uimr n;	uimr sum = 0;	ui5b total[2];	uimr pad;	tMyErr err;	/*		Initialize structure containing state of computation.		(RFC 1321, 3.3: Step 3)	*/	ctx.A = 0x67452301;	ctx.B = 0xefcdab89;	ctx.C = 0x98badcfe;	ctx.D = 0x10325476;	total[0] = total[1] = 0;	/*		We read the file in blocks of md5_BLOCKSIZE bytes.  One call of the		computation function processes the whole buffer so that with the		next round of the loop another block can be read.	*/	/* Read block. Take care for partial reads.  */	while (noErr == (err = md5_read_p(buffer + sum, md5_BLOCKSIZE - sum, &n))) {		sum += n;		/*			First increment the byte count.  RFC 1321 specifies the possible			length of the file up to 2^64 bits.  Here we only compute the			number of bytes.  Do a double word increment.		*/		total[0] += n;		if (total[0] < n) {			++total[1];		}		if (sum >= md5_BLOCKSIZE) {			/*				Process buffer with md5_BLOCKSIZE bytes.  Note that				md5_BLOCKSIZE % 64 == 0			*/			md5_process_block(buffer, md5_BLOCKn, &ctx);			sum = 0;		}	}	if (eofErr == err) {		err = noErr;		/* Process available complete blocks.  */		if (sum >= md5_SubBlockSz) {			md5_process_block(buffer,				FloorDivPow2(sum, md5_SubBlockLn2sz), &ctx);			bufferp = buffer				+ FloorPow2Mult(sum, md5_SubBlockLn2sz);			sum = ModPow2(sum, md5_SubBlockLn2sz);		}		/* Take yet unprocessed bytes into account.  */		pad = (sum >= md5_SubBlockSz - 8)			? (md5_SubBlockSz + md5_SubBlockSz - 8 - sum)			: (md5_SubBlockSz - 8 - sum);		MyMoveBytes(fillbuf, &(bufferp[sum]), pad);		/* Put the 64-bit file length in *bits* at the end of the buffer. */		SetLSBui5(&(bufferp[sum + pad]    ), total[0] << 3);		SetLSBui5(&(bufferp[sum + pad + 4]), (total[1] << 3) |			(total[0] >> 29));		/* Process padded block or two.  */		md5_process_block(bufferp,			FloorDivPow2(sum + pad + 8, md5_SubBlockLn2sz), &ctx);		SetLSBui5(resblock,      ctx.A);		SetLSBui5(resblock +  4, ctx.B);		SetLSBui5(resblock +  8, ctx.C);		SetLSBui5(resblock + 12, ctx.D);	}	return err;}