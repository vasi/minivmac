/*	SLCTFOLD.i	Copyright (C) 2010 Paul C. Pratt	You can redistribute this file and/or modify it under the terms	of version 2 of the GNU General Public License as published by	the Free Software Foundation.  You should have received a copy	of the license along with this file; see the file COPYING.	This file is distributed in the hope that it will be useful,	but WITHOUT ANY WARRANTY; without even the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	license for more details.*//*	SeLeCT FOLDer dialog	Implemented while looking at		Apple's SC.018.StdFile example code,	and also		Disinfectant 2.4 Sample Source Code by John Norstad.*//* resource IDs of our custom dialogs */#ifndef MyGetFolderDlgID#define MyGetFolderDlgID 2000#endif#ifndef MyGetFolderDialogID#define MyGetFolderDialogID 2001#endif/* item numbers for our custom dialogs */#define kGetDirButton 11	/* folder button */#define kGetDirNowButton 12	/* select current folder button */LOCALFUNC tMyErr MyGetSFCurDir(MyDir_R *d, StringPtr s){#if 0	d->VRefNum = - LMGetSFSaveDisk();	d->DirId = LMGetCurDirStore();	PStrClear(s);#endif	MyDir_R src_d;	src_d.VRefNum = - LMGetSFSaveDisk();	src_d.DirId = LMGetCurDirStore();	return MyFindDirNameParentDir(&src_d, d, s);}LOCALPROC FlashButtonControl(DialogRef theDialog, short theItem){	short itemType;	Handle item;	Rect box;	unsigned long L;	GetDialogItem(theDialog, theItem, &itemType, &item, &box);	HiliteControl((ControlRef)item, kControlButtonPart);	Delay(8, &L);	HiliteControl((ControlRef)item, kControlNoPart);}#ifndef InputMayBeFile#define InputMayBeFile 1#endif#if InputMayBeFile#define FolderFFilter NULL#elsestatic pascal Boolean FolderFFilter(CInfoPBPtr pBlock){	return ! CatInfoIsFolder(pBlock);}#endifstruct GetDirDlg_R {	MyPtr SavepDt;	SFReply Reply;	Boolean FolderActive;	MyDir_R *d;	StringPtr s;	blnr GotFolder;};typedef struct GetDirDlg_R GetDirDlg_R;#define GetDirDlg_gd() ((GetDirDlg_R *)(pDt))pascal short GetDirDlgHook(short item, DialogPtr theDialog){	short v = item;	blnr FolderActive = (0 == PStrLength(GetDirDlg_gd()->Reply.fName))		&& (0 != GetDirDlg_gd()->Reply.fType);	if (FolderActive != GetDirDlg_gd()->FolderActive) {		short itemType;		Handle item;		Rect box;		GetDialogItem(theDialog, kGetDirButton, &itemType, &item, &box);		HiliteControl((ControlRef)item, FolderActive ? kControlNoPart : kControlInactivePart);		GetDirDlg_gd()->FolderActive = FolderActive;	}	if (item == kGetDirNowButton) {		if (noErr == MyGetSFCurDir(GetDirDlg_gd()->d,			GetDirDlg_gd()->s))		{			GetDirDlg_gd()->GotFolder = trueblnr;			v = getCancel;		}	} else if (item == kGetDirButton) {		if (FolderActive) {			MyDir_R src_d;			src_d.VRefNum = - LMGetSFSaveDisk();			src_d.DirId = GetDirDlg_gd()->Reply.fType;			if (noErr == MyFindDirNameParentDir(&src_d,				GetDirDlg_gd()->d, GetDirDlg_gd()->s))			{				GetDirDlg_gd()->GotFolder = trueblnr;				v = getCancel;			}#if 0			GetDirDlg_gd()->d->VRefNum = - LMGetSFSaveDisk();			GetDirDlg_gd()->d->DirId = GetDirDlg_gd()->Reply.fType;			PStrClear(GetDirDlg_gd()->s);#endif		}	}	return v;}pascal Boolean MySelectFolderFilterProc(DialogRef theDialog,	EventRecord *theEvent, short *itemHit){	if (keyDown == theEvent->what) {		if (0 != (theEvent->modifiers & cmdKey)) {			char theChar = theEvent->message & charCodeMask;			if ((theChar == 'g') || (theChar == 'G')) {				if (GetDirDlg_gd()->FolderActive) {					FlashButtonControl(theDialog, kGetDirButton);					*itemHit = kGetDirButton;					return trueblnr;				}			}		}	}	return falseblnr;}#if InputMayBeFile#define FolderNewFFilter NULL#elsestatic pascal Boolean FolderNewFFilter(CInfoPBPtr pBlock, void *yourDataPtr){#pragma unused(yourDataPtr)	return ! CatInfoIsFolder(pBlock);}#endifstruct GetDirNewDlg_R {	StandardFileReply Reply;	Boolean FolderActive;	MyDir_R *d;	StringPtr s;	blnr GotFolder;};typedef struct GetDirNewDlg_R GetDirNewDlg_R;#define GetDirNewDlg_gd() ((GetDirNewDlg_R *)(yourDataPtr))pascal short GetDirNewDlgHook(short item, DialogPtr theDialog, void *yourDataPtr){	short v = item;	blnr FolderActive = GetDirNewDlg_gd()->Reply.sfIsFolder		|| GetDirNewDlg_gd()->Reply.sfIsVolume;	if (sfMainDialogRefCon != GetWRefCon(theDialog)) {		return v;	}	if (FolderActive != GetDirNewDlg_gd()->FolderActive) {		short itemType;		Handle item;		Rect box;		GetDialogItem(theDialog, kGetDirButton, &itemType, &item, &box);		HiliteControl((ControlRef)item, FolderActive ? kControlNoPart : kControlInactivePart);		GetDirNewDlg_gd()->FolderActive = FolderActive;	}	if (item == kGetDirNowButton) {		if (noErr == MyGetSFCurDir(GetDirNewDlg_gd()->d,			GetDirNewDlg_gd()->s))		{			GetDirNewDlg_gd()->GotFolder = trueblnr;			v = sfItemCancelButton;		}	} else if (item == kGetDirButton) {		if (FolderActive) {			GetDirNewDlg_gd()->d->VRefNum = GetDirNewDlg_gd()->Reply.sfFile.vRefNum;			GetDirNewDlg_gd()->d->DirId = GetDirNewDlg_gd()->Reply.sfFile.parID;			PStrCopy(GetDirNewDlg_gd()->s, GetDirNewDlg_gd()->Reply.sfFile.name);#if 0			MyDir_R src_d;			src_d.VRefNum = GetDirNewDlg_gd()->Reply.sfFile.vRefNum;			src_d.DirId = GetDirNewDlg_gd()->Reply.sfFile.parID;			if (noErr == MyFindNamedChildDir_v2(&src_d,				GetDirNewDlg_gd()->Reply.sfFile.name,				GetDirNewDlg_gd()->d))			{				PStrClear(GetDirNewDlg_gd()->s);			}#endif			GetDirNewDlg_gd()->GotFolder = trueblnr;			v = sfItemCancelButton;		}	}	return v;}pascal Boolean MySelectFolderYDFilterProc(DialogRef theDialog,	EventRecord *theEvent, short *itemHit, void *yourDataPtr){	if (keyDown == theEvent->what) {		if (0 != (theEvent->modifiers & cmdKey)) {			char theChar = theEvent->message & charCodeMask;			if ((theChar == 'g') || (theChar == 'G')) {				if (GetDirNewDlg_gd()->FolderActive) {					FlashButtonControl(theDialog, kGetDirButton);					*itemHit = kGetDirButton;					return trueblnr;				}			}		}	}	return falseblnr;}#ifdef Have_MACINITSGLOBALFUNC tMyErr MySelectFolder(MyDir_R *d, StringPtr s){	tMyErr err;	if (! HaveCustomPutFileAvail()) {		Point tempPt;		GetDirDlg_R r;		tempPt.h = 50;		tempPt.v = 50;		r.d = d;		r.s = s;		r.GotFolder = falseblnr;		r.FolderActive = true;		r.SavepDt = pDt;		pDt = (MyPtr)&r;		SFPGetFile(tempPt, (ConstStr255Param)"\p", FolderFFilter, (-1),			NULL, GetDirDlgHook, &r.Reply, MyGetFolderDlgID,			MySelectFolderFilterProc /* NULL */);		if (r.GotFolder) {			err = noErr;		} else#if InputMayBeFile		if (r.Reply.good) {			PStrCopy(s, r.Reply.fName);			err = MyDirFromWD_v2(r.Reply.vRefNum, d);		} else#endif		{			err = kMyErrUsrCancel;		}		pDt = r.SavepDt;	} else {		Point tempPt;		GetDirNewDlg_R r;		r.d = d;		r.s = s;		r.GotFolder = falseblnr;		r.FolderActive = true;		tempPt.h = -1;		tempPt.v = -1;		CustomGetFile(FolderNewFFilter, /* fileFilter */			(-1), /* numTypes */			NULL, /* typeList */			&r.Reply,			MyGetFolderDialogID /* dlgID */,			tempPt,			GetDirNewDlgHook, /* dlgHook */			MySelectFolderYDFilterProc /* NULL */, /* filterProc */			NULL, /* &activeList */			NULL, /* activateProc */			(Ptr)&r /* &yourDataPtr */);		if (r.GotFolder) {			err = noErr;		} else#if InputMayBeFile		if (r.Reply.sfGood) {			d->VRefNum = r.Reply.sfFile.vRefNum;			d->DirId = r.Reply.sfFile.parID;			PStrCopy(s, r.Reply.sfFile.name);			err = noErr;		} else#endif		{			err = kMyErrUsrCancel;		}	}	return err;}#endif