;	CmpTests.a;;	Copyright (C) 2007 Paul C. Pratt;;	You can redistribute this file and/or modify it under the terms;	of version 2 of the GNU General Public License as published by;	the Free Software Foundation.  You should have received a copy;	of the license along with this file; see the file COPYING.;;	This file is distributed in the hope that it will be useful,;	but WITHOUT ANY WARRANTY; without even the implied warranty of;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the;	license for more details.	IMPORT MsgExitCmpBTests	PROC; zero result	MOVEQ	#$04, D3	MOVE.L	#$AB91BC00, D0	MOVE.L	#$7FDB4100, D2	BSR	@8	MOVE.L	#$8568557F, D0	MOVE.L	#$8567567F, D2	BSR	@8	MOVE.L	#$A2C96065, D0	MOVE.L	#$B16ABF65, D2	BSR	@8	MOVE.L	#$0DE57180, D0	MOVE.L	#$CB162480, D2	BSR	@8	MOVE.L	#$D0E70FFF, D0	MOVE.L	#$4BFCA8FF, D2	BSR	@8	MOVE.L	#$456746DE, D0	MOVE.L	#$456845DE, D2	BSR	@8; positive result A	MOVEQ	#$00, D3	MOVE.L	#$85688501, D0	MOVE.L	#$45675600, D2	BSR	@8	MOVE.L	#$F567857F, D0	MOVE.L	#$F568867E, D2	BSR	@8	MOVE.L	#$65A2AA7F, D0	MOVE.L	#$0BFF9400, D2	BSR	@8	MOVE.L	#$678D8821, D0	MOVE.L	#$0F03A113, D2	BSR	@8	MOVE.L	#$D79D8881, D0	MOVE.L	#$7244EB80, D2	BSR	@8	MOVE.L	#$61E7A1FF, D0	MOVE.L	#$17AAC0FE, D2	BSR	@8	MOVE.L	#$932440FF, D0	MOVE.L	#$A12C8D80, D2	BSR	@8	MOVE.L	#$68EC62B2, D0	MOVE.L	#$4708708B, D2	BSR	@8	MOVE.L	#$4318EA02, D0	MOVE.L	#$AF2DBF01, D2	BSR	@8; positive result B	MOVEQ	#$01, D3	MOVE.L	#$209A8C00, D0	MOVE.L	#$BDB6FF81, D2	BSR	@8	MOVE.L	#$35A8D37E, D0	MOVE.L	#$0E056FFF, D2	BSR	@8	MOVE.L	#$69FC4800, D0	MOVE.L	#$44A06EFF, D2	BSR	@8	MOVE.L	#$4DDE6160, D0	MOVE.L	#$374DDAEB, D2	BSR	@8	MOVE.L	#$85EC4E01, D0	MOVE.L	#$70915582, D2	BSR	@8; negative result A	MOVEQ	#$09, D3	MOVE.L	#$9D759A00, D0	MOVE.L	#$A1F63401, D2	BSR	@8	MOVE.L	#$7472EB7E, D0	MOVE.L	#$E43BE67F, D2	BSR	@8	MOVE.L	#$B51B0600, D0	MOVE.L	#$049D1B7F, D2	BSR	@8	MOVE.L	#$C9AC5807, D0	MOVE.L	#$484F4A18, D2	BSR	@8	MOVE.L	#$52136F80, D0	MOVE.L	#$E55BC381, D2	BSR	@8	MOVE.L	#$41B8AFFE, D0	MOVE.L	#$0D704CFF, D2	BSR	@8	MOVE.L	#$298DF380, D0	MOVE.L	#$D65704FF, D2	BSR	@8	MOVE.L	#$CEB378D1, D0	MOVE.L	#$E0BEF1DA, D2	BSR	@8	MOVE.L	#$66788D01, D0	MOVE.L	#$3AF76C02, D2	BSR	@8; negative result B	MOVEQ	#$08, D3	MOVE.L	#$C3F24F80, D0	MOVE.L	#$90C2C700, D2	BSR	@8	MOVE.L	#$181950FF, D0	MOVE.L	#$7D17977F, D2	BSR	@8	MOVE.L	#$A1ECC0FF, D0	MOVE.L	#$D71DD900, D2	BSR	@8	MOVE.L	#$8159309C, D0	MOVE.L	#$B00C1819, D2	BSR	@8; positive overflow	MOVEQ	#$0B, D3	MOVE.L	#$97DA8900, D0	MOVE.L	#$06940880, D2	BSR	@8	MOVE.L	#$3C19C87F, D0	MOVE.L	#$126C93FF, D2	BSR	@8	MOVE.L	#$5D42B97F, D0	MOVE.L	#$3D4C6E80, D2	BSR	@8	MOVE.L	#$3899E33B, D0	MOVE.L	#$096228B2, D2	BSR	@8	MOVE.L	#$98CF7901, D0	MOVE.L	#$E74DAA81, D2	BSR	@8; negative overflow	MOVEQ	#$02, D3	MOVE.L	#$0BBAF080, D0	MOVE.L	#$91B8C801, D2	BSR	@8	MOVE.L	#$39B61AFE, D0	MOVE.L	#$61E24E7F, D2	BSR	@8	MOVE.L	#$92ED0D80, D0	MOVE.L	#$F54B2D7F, D2	BSR	@8	MOVE.L	#$77E6DBD9, D0	MOVE.L	#$7E058577, D2	BSR	@8	RTS@8	MOVE	D1, CCR	CMP.B	D2, D0	MOVE	SR, D0	MOVE	D0, D2	AND.B	#$0F, D2	CMP.B	D3, D2	BNE	@3	EOR	D1, D0	AND.B	#$F0, D0	BNE	@3	RTS@3	LEA	#'CMP.B Fails',A0	JMP	MsgExit	ENDPROCCmpWTests	PROC; zero result	MOVEQ	#$04, D3	MOVE.L	#$91BC0000, D0	MOVE.L	#$DB410000, D2	BSR	@8	MOVE.L	#$68557FFF, D0	MOVE.L	#$67567FFF, D2	BSR	@8	MOVE.L	#$C9606535, D0	MOVE.L	#$6ABF6535, D2	BSR	@8	MOVE.L	#$E5718000, D0	MOVE.L	#$16248000, D2	BSR	@8	MOVE.L	#$E70FFFFF, D0	MOVE.L	#$FCA8FFFF, D2	BSR	@8	MOVE.L	#$6746DE3A, D0	MOVE.L	#$6845DE3A, D2	BSR	@8; positive result A	MOVEQ	#$00, D3	MOVE.L	#$68850001, D0	MOVE.L	#$67560000, D2	BSR	@8	MOVE.L	#$67857FFF, D0	MOVE.L	#$68867FFE, D2	BSR	@8	MOVE.L	#$A2AA7FFF, D0	MOVE.L	#$FF940000, D2	BSR	@8	MOVE.L	#$8D882136, D0	MOVE.L	#$03A11395, D2	BSR	@8	MOVE.L	#$9D888001, D0	MOVE.L	#$44EB8000, D2	BSR	@8	MOVE.L	#$E7A1FFFF, D0	MOVE.L	#$AAC0FFFE, D2	BSR	@8	MOVE.L	#$2440FFFF, D0	MOVE.L	#$2C8D8000, D2	BSR	@8	MOVE.L	#$EC62B246, D0	MOVE.L	#$08708B9A, D2	BSR	@8	MOVE.L	#$18EA0002, D0	MOVE.L	#$2DBF0001, D2	BSR	@8; positive result B	MOVEQ	#$01, D3	MOVE.L	#$9A8C0000, D0	MOVE.L	#$B6FF8001, D2	BSR	@8	MOVE.L	#$A8D37FFE, D0	MOVE.L	#$056FFFFF, D2	BSR	@8	MOVE.L	#$FC480000, D0	MOVE.L	#$A06EFFFF, D2	BSR	@8	MOVE.L	#$DE616023, D0	MOVE.L	#$4DDAEB7F, D2	BSR	@8	MOVE.L	#$EC4E0001, D0	MOVE.L	#$91558002, D2	BSR	@8; negative result A	MOVEQ	#$09, D3	MOVE.L	#$759A0000, D0	MOVE.L	#$F6340001, D2	BSR	@8	MOVE.L	#$72EB7FFE, D0	MOVE.L	#$3BE67FFF, D2	BSR	@8	MOVE.L	#$1B060000, D0	MOVE.L	#$9D1B7FFF, D2	BSR	@8	MOVE.L	#$AC580714, D0	MOVE.L	#$4F4A18A7, D2	BSR	@8	MOVE.L	#$136F8000, D0	MOVE.L	#$5BC38001, D2	BSR	@8	MOVE.L	#$B8AFFFFE, D0	MOVE.L	#$704CFFFF, D2	BSR	@8	MOVE.L	#$8DF38000, D0	MOVE.L	#$5704FFFF, D2	BSR	@8	MOVE.L	#$B378D1A4, D0	MOVE.L	#$BEF1DA25, D2	BSR	@8	MOVE.L	#$788D0001, D0	MOVE.L	#$F76C0002, D2	BSR	@8; negative result B	MOVEQ	#$08, D3	MOVE.L	#$F24F8000, D0	MOVE.L	#$C2C70000, D2	BSR	@8	MOVE.L	#$1950FFFF, D0	MOVE.L	#$17977FFF, D2	BSR	@8	MOVE.L	#$ECC0FFFF, D0	MOVE.L	#$1DD90000, D2	BSR	@8	MOVE.L	#$59309C26, D0	MOVE.L	#$0C1819BC, D2	BSR	@8; positive overflow	MOVEQ	#$0B, D3	MOVE.L	#$DA890000, D0	MOVE.L	#$94088000, D2	BSR	@8	MOVE.L	#$19C87FFF, D0	MOVE.L	#$6C93FFFF, D2	BSR	@8	MOVE.L	#$42B97FFF, D0	MOVE.L	#$4C6E8000, D2	BSR	@8	MOVE.L	#$99E33BC3, D0	MOVE.L	#$6228B214, D2	BSR	@8	MOVE.L	#$CF790001, D0	MOVE.L	#$4DAA8001, D2	BSR	@8; negative overflow	MOVEQ	#$02, D3	MOVE.L	#$BAF08000, D0	MOVE.L	#$B8C80001, D2	BSR	@8	MOVE.L	#$B61AFFFE, D0	MOVE.L	#$E24E7FFF, D2	BSR	@8	MOVE.L	#$ED0D8000, D0	MOVE.L	#$4B2D7FFF, D2	BSR	@8	MOVE.L	#$E6DBD925, D0	MOVE.L	#$058577E6, D2	BSR	@8	RTS@8	MOVE	D1, CCR	CMP.W	D2, D0	MOVE	SR, D0	MOVE	D0, D2	AND.B	#$0F, D2	CMP.B	D3, D2	BNE	@3	EOR	D1, D0	AND.B	#$F0, D0	BNE	@3	RTS@3	LEA	#'CMP.W Fails',A0	JMP	MsgExit	ENDPROCCmpLTests	PROC; zero result	MOVEQ	#$04, D3	MOVE.L	#$00000000, D0	MOVE.L	#$00000000, D2	BSR	@8	MOVE.L	#$7FFFFFFF, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$6535E716, D0	MOVE.L	#$6535E716, D2	BSR	@8	MOVE.L	#$80000000, D0	MOVE.L	#$80000000, D2	BSR	@8	MOVE.L	#$FFFFFFFF, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$DE3A1682, D0	MOVE.L	#$DE3A1682, D2	BSR	@8; positive result A	MOVEQ	#$00, D3	MOVE.L	#$00000001, D0	MOVE.L	#$00000000, D2	BSR	@8	MOVE.L	#$7FFFFFFF, D0	MOVE.L	#$7FFFFFFE, D2	BSR	@8	MOVE.L	#$7FFFFFFF, D0	MOVE.L	#$00000000, D2	BSR	@8	MOVE.L	#$2136AC46, D0	MOVE.L	#$1395CB9A, D2	BSR	@8	MOVE.L	#$80000001, D0	MOVE.L	#$80000000, D2	BSR	@8	MOVE.L	#$FFFFFFFF, D0	MOVE.L	#$FFFFFFFE, D2	BSR	@8	MOVE.L	#$FFFFFFFF, D0	MOVE.L	#$80000000, D2	BSR	@8	MOVE.L	#$B2463636, D0	MOVE.L	#$8B9A7A23, D2	BSR	@8	MOVE.L	#$00000002, D0	MOVE.L	#$00000001, D2	BSR	@8; positive result B	MOVEQ	#$01, D3	MOVE.L	#$00000000, D0	MOVE.L	#$80000001, D2	BSR	@8	MOVE.L	#$7FFFFFFE, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$00000000, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$60231795, D0	MOVE.L	#$EB7FBC90, D2	BSR	@8	MOVE.L	#$00000001, D0	MOVE.L	#$80000002, D2	BSR	@8; negative result A	MOVEQ	#$09, D3	MOVE.L	#$00000000, D0	MOVE.L	#$00000001, D2	BSR	@8	MOVE.L	#$7FFFFFFE, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$00000000, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$07149123, D0	MOVE.L	#$18A7B789, D2	BSR	@8	MOVE.L	#$80000000, D0	MOVE.L	#$80000001, D2	BSR	@8	MOVE.L	#$FFFFFFFE, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$80000000, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$D1A4C140, D0	MOVE.L	#$DA251965, D2	BSR	@8	MOVE.L	#$00000001, D0	MOVE.L	#$00000002, D2	BSR	@8; negative result B	MOVEQ	#$08, D3	MOVE.L	#$80000000, D0	MOVE.L	#$00000000, D2	BSR	@8	MOVE.L	#$FFFFFFFF, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$FFFFFFFF, D0	MOVE.L	#$00000000, D2	BSR	@8	MOVE.L	#$9C263978, D0	MOVE.L	#$19BCC876, D2	BSR	@8; positive overflow	MOVEQ	#$0B, D3	MOVE.L	#$00000000, D0	MOVE.L	#$80000000, D2	BSR	@8	MOVE.L	#$7FFFFFFF, D0	MOVE.L	#$FFFFFFFF, D2	BSR	@8	MOVE.L	#$7FFFFFFF, D0	MOVE.L	#$80000000, D2	BSR	@8	MOVE.L	#$3BC3D456, D0	MOVE.L	#$B2142C98, D2	BSR	@8	MOVE.L	#$00000001, D0	MOVE.L	#$80000001, D2	BSR	@8; negative overflow	MOVEQ	#$02, D3	MOVE.L	#$80000000, D0	MOVE.L	#$00000001, D2	BSR	@8	MOVE.L	#$FFFFFFFE, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$80000000, D0	MOVE.L	#$7FFFFFFF, D2	BSR	@8	MOVE.L	#$D9253678, D0	MOVE.L	#$77E6FA6E, D2	BSR	@8	RTS@8	MOVE	D1, CCR	CMP.L	D2, D0	MOVE	SR, D0	MOVE	D0, D2	AND.B	#$0F, D2	CMP.B	D3, D2	BNE	@3	EOR	D1, D0	AND.B	#$F0, D0	BNE	@3	RTS@3	LEA	#'CMP.L Fails',A0	JMP	MsgExit	ENDPROCCmpTests PROC EXPORT	JSR	CmpBTests	JSR	CmpWTests	JSR	CmpLTests	RTS	ENDPROC		END